#API https://github.com/15Dkatz/official_joke_api
#source https://www.ontestautomation.com/writing-api-tests-in-python-with-tavern/

---
# Simple request and validate status code
test_name: Sending request and checking response status code ex01

stages:
  - name: Check that HTTP status code equals 200
    request:
      url: http://api.zippopotam.us/us/90210
      method: GET
    response:
      status_code: 200


---

# Request variables
test_name: Using request variables ex02
stages:
  - name: Create a resource, in response convert str -> int
    request:
      url: https://jsonplaceholder.typicode.com/posts
      method: POST
      json:
        title: foo
        body: bar
        userId: 1
      headers:
        content-type: application/json; charset=UTF-8

    response:
      status_code:
        - 201
#        - 503
      json:
        title: "{tavern.request_vars.json.title}"
        body: "{tavern.request_vars.json.body}"
        userId: !int "{tavern.request_vars.json.userId}"
        id: 101

---
# Environment variables

# Before running the test update ~/.bash_profile
# export TITLE="foo"
# export PYTHONPATH="$PYTHONPATH:/Users/maksim/repos/aerofiler-tavern/tests"
# source  ~/.bash_profile

# OR

# Use the following command to add module containing external function
# PYTHONPATH=$PYTHONPATH:./tests pytest tests/test_basics.tavern.yaml --k ex03


test_name: Using  environment variables ex03

stages:
  - name: Create a resource, use environment variables to validate response
    request:
      url: https://jsonplaceholder.typicode.com/posts
      method: POST
      json:
        title: foo
        body: bar
        userId: 1
      headers:
        content-type: application/json; charset=UTF-8

    response:
      status_code: 201
      json:
        title: "{tavern.env_vars.TITLE}"


---

# Checking the response using external functions
#Before running the test update~/.bash_profile
#export PYTHONPATH="PYTHONPATH:/Users/maksim/repos/aerofiler-tavern/tests"

#you can only use an external function to create the whole body or response -
#if you just want one value, you should use a pytest fixture (an example is in the documentation)


test_name: Using external function to validate response ex04
stages:
  - name: Make sure we have the right ID
    request:
      url: https://jsonplaceholder.typicode.com/posts/1
      method: GET

    response:
      status_code: 200
      verify_response_with:
        function: utils:get_id

---

# Using built-in validators
# See documentation here https://pykwalify.readthedocs.io/en/unstable/validation-rules.html#mapping

test_name: Using built-in validators ex05
stages:
  - name: Make sure the response matches the given schema
    request:
      url: https://jsonplaceholder.typicode.com/posts/1
      method: GET

    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              id:
                type: int
                required: True
              title:
                type: any
                required: True
              body:
                type: any
                required: True
              userId:
                type: any
                required: True

#  Expected
#{
#  id: 1,
#  title: '[...]',
#  body: '[...]',
#  userId: 1
#}

---
# Using built-in validator
# The dict can have keys which are not present in the schema, and these can map to anything
# Usage: allowempty: True
# See documentation here https://pykwalify.readthedocs.io/en/unstable/validation-rules.html#mapping

test_name: Using built-in validators and allowempty ex06
stages:
  - name: Make sure the response matches the given schema
    request:
      url: https://jsonplaceholder.typicode.com/posts/1
      method: GET

    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            allowempty: True
            mapping:
              id:
                type: int
                required: True
              title:
                type: any
                required: True

---

# Simple request and validate headers
test_name: Get location for US zip code 90210 and validate response content type is equal to ‘application/json’ ex07

strict:
  - headers:off
  - json:off

stages:
  - name: Check that HTTP status code equals 200 and other fields
    request:
      url: http://api.zippopotam.us/us/90210
      method: GET

    response:
      headers:
        content-type: application/json


---
# TODO:  When "body" is used in response instead of "json" test fails. Why?
# Simple request and validate json content
test_name: Get location for US zip code 90210 and check response body content ex08

stages:
  - name: Check that place name equals Beverly Hills
    request:
      url: http://api.zippopotam.us/us/90210
      method: GET

    response:
      json:  # this works
#      body: # this fails
        places:
          - place name: Beverly Hills


---

# How to use parametrization
test_name: Usin parametrization in test ex09
marks:
  - parametrize:
      key:
        - country_code
        - zip_code
        - place_name
      vals:
        - [us, 12345, Schenectady]
        - [ca, B2A, North Sydney South Central]
        - [nl, 3825, Vathorst]

stages:
  - name: Verify place name in response body
    request:
      url: http://api.zippopotam.us/{country_code}/{zip_code}
      method: GET
    response:
      json:
        places:
          - place name: "{place_name}"


---

# Using external functions
# Run: pytest tests/test_basics.tavern.yaml -q -k ex10

test_name: Injecting external data into a request using external functions for other things ex10
stages:
  - name: Injecting external data into a request

    request:
      url: http://www.recipepuppy.com/api/?i=avocado&q=kale&p=1
# TODO How to inject the following data into a request using external function and url: http://www.recipepuppy.com/api/?
#      req = {
#      "i": "avocado",
#      "q": "kale",
#      "p": 1,
#
#  }
      method: GET
#      json:generate_req1
#        $ext:
#          function: utils:generate_req1

    response:
      status_code: 200
      json:
        title: Recipe Puppy
        version:  0.1
        results:
          - title: "A Ok Salad Recipe"
            ingredients: "cayenne, lemon, avocado, kale, sea salt, tomato"

---

# Saving data from response using external functions

# Run: PYTHONPATH=$PYTHONPATH:/tests  pytest tests/test_basics.tavern.yaml -q -k ex011

test_name: Saving data from response using external functions ex11
stages:
  - name: Validate status code 200

    request:
      url: http://www.recipepuppy.com/api/?i=avocado&q=kale&p=1
      method: GET

# TODO How to parse the same request using json and url without parameters http://www.recipepuppy.com/api/?
#      json:
#        i: avocado
#        q: kale
#        p: 1

    response:
      json:
        title: "Recipe Puppy"
      save:
        $ext:
          function: utils:save_data
        json:
          test_ingredients: results[0].ingredients

  - name: Validate saved  data

    request:
      url: http://www.recipepuppy.com/api/?i=avocado&q=kale&p=1
      method: GET

    response:
      json:
        results:
          - title: "{test_title}"
            ingredients: "{test_ingredients}"


#In this case, both `{test_title}` and `{test_ingredients}` are available for use
#in later requests


#---

##Authentication
# TODO: How to implement login with authentication for any public API.
# For example  https://developers.soundcloud.com/docs/api/reference ?
#
#test_name: Soundcloud test ex14
#stages:
#  - name: Login
#
#    request:
#      url: https://api-auth.soundcloud.com/web-auth/identifier?
#      method: GET
#      auth:
#        - electromax@mail.ru
#        - C4LjheM1nRRHhrum7d3eqovft5QxHlAe
#
#    response:
#      status_code: 200


---
#Reusing requests and YAML fragments

test_name: Reusing requests and YAML fragments part1  ex15
stages:
  - name: &name_block Send request
    request: &request_block
      url: http://www.recipepuppy.com/api/?i=avocado&q=kale&p=1
      method: GET

---

test_name: Reusing requests and YAML fragments part2 ex16
stages:
  - name: Reusing req block
    request:
      *request_block
    response:
      status_code: 200
      json:
        title: Recipe Puppy
        version:  0.1
        results:
          - title: "A Ok Salad Recipe"
            ingredients: "cayenne, lemon, avocado, kale, sea salt, tomato"


## TODO What would be correct syntax if we want to reuse entire name_block from ex15?
# Below test fails with error
#E   expected <block end>, but found '<block mapping start>'
#E     in "/Users/maksim/repos/aerofiler-tavern/tests/test_basics.tavern.yaml", line 365, column 7
#E   tavern.util.exceptions.BadSchemaError


#---
#test_name: Reusing requests and YAML fragments part3 ex17
#stages:
#
#  - name:
#      *name_block
#      response:
#        status_code: 200
#        json:
#          title: Recipe Puppy
#          version:  0.1
#          results:
#            - title: "A Ok Salad Recipe"
#              ingredients: "cayenne, lemon, avocado, kale, sea salt, tomato"

---
# Simple example

test_name: List all users ex18

stages:
  - name: Check that HTTP status code equals 200
    request:
      url: https://gorest.co.in/public-api/users/123
      method: GET
    response:
      status_code: 200
      json:
        result:
          name: Unauthorized
          code: 0
          status: 401

---
# Including external files, using common.yaml
# includes.yaml should bre in the same folder as the tests

test_name: Including external files ex19
includes:
  - !include includes.yaml

stages:
  - name: Check that HTTP status code equals 200
    request:
      url: "{protocol1}://{host_gorest}{res_users}"
      method: GET
    response:
      status_code: 200
      json:
        result:
          name: Unauthorized
          code: 0
          status: 401

---
# Including  global configuration files
# includes.yaml should be in the same folder as the tests
# pytest.ini
#[pytest]
#tavern-global-cfg=tests/common.yaml
#tavern-global-cfg=testss/includesA.yaml
#tavern-global-cfg=tests/includesB.yaml

test_name: Including  global configuration files part1 ex20

includes:
  - !include includesA.yaml

stages:
  - name: Send request
    request:
      url: "{protocol2}://{host_rp}{res_rp}{query1}"
      method: GET
    response:
          status_code: 200
          json:
            results:
              - title: A Ok Salad Recipe

---
test_name: Including  global configuration files part2 ex21

includes:
  - !include includesB.yaml

stages:
  - name: Send request
    request:
      url: "{protocol2}://{host_rp}{res_rp}{query2}"
      method: GET
    response:
          status_code: 200
          json:
            results:
              - title: Chocolate-chocolate Chip Banana Muffins Recipe
              - title: Chocolate Banana Chocolate Chip Bundt Cake
              - title: Banana Fritters in Chocolate Batter And Chocolate Sauce

---
# Multiple global configuration files
# includes.yaml should be in the same folder as the tests
# pytest.ini
#[pytest]
#tavern-global-cfg=tests/common.yaml
#tavern-global-cfg=tests/api_urls.yaml

test_name: Including  multiple global configuration files ex22

stages:
  - name: Send request
    request:
      url: "{protocol2}://{host_zpm}/us/10000"
      method: GET
    response:
          status_code: 200
          json:
            places:
              - place name: New York City


---
# Authentication  example. Using saved variable. Using external function to generate request

#you can only use an external function to create the whole body or response -
#if you just want one value, you should use a pytest fixture (an example is in the documentation)

#Note that there is also no way to use a fixture to generate a block of json - either use $ext to generate the whole
#request, or a fixture to generate one value. Anything in between is currently not implemented (see #191 )

test_name: Authenticate and add new random user ex25

stages:
  - name: Authenticate and add new random user
    request:
      url: https://gorest.co.in/public-api/users
      method: POST
      headers:
        Content-Type: application/json
        Authorization: Bearer 0fVcl9o-ZPi5TbinICi7OU4fm_GJ_7q0O6ea
      json:
        $ext:
          function: utils:generate_req3

# TODO: Passes if we add 302 status code? Why?
    response:
      status_code:
        - 200
        - 302 # the requested resource has been temporarily moved to a different URI
      json:
        result:
          id: !anystr
      save:
        json:
          user_id: result.id

  - name: Check user's details

    request:
      url: https://gorest.co.in/public-api/users/{user_id}
      method: GET
      headers:
        Content-Type: application/json
        Authorization: Bearer 0fVcl9o-ZPi5TbinICi7OU4fm_GJ_7q0O6ea

    response:
      status_code: 200
      verify_response_with:
        function: utils:log_response
      json:
        result:
          first_name: Max
          gender: male
          id: "{user_id}"



---
# Sharing stages in configuration files

test_name: Sharing stages in configuration   ex26

stages:
  - type: ref
    id: add_rand_user

  - name: Check user's details

    request:
      url: https://gorest.co.in/public-api/users/{user_id}
      method: GET
      headers:
        Content-Type: application/json
        Authorization: Bearer 0fVcl9o-ZPi5TbinICi7OU4fm_GJ_7q0O6ea

    response:
      status_code: 200
      verify_response_with:
        function: utils:log_response
      json:
        result:
          first_name: Max
          gender: male
          id: "{user_id}"

---
# Matching arbitrary return values in a response
test_name: Match arbitrary return values ex27

stages:
  - name: Check value types in user details

    request:
      url: https://gorest.co.in/public-api/users
      method: GET
      headers:
        Content-Type: application/json
        Authorization: Bearer 0fVcl9o-ZPi5TbinICi7OU4fm_GJ_7q0O6ea

    response:
      status_code: 200
      json:
        result:
          - first_name: !anystr
            status: active
            id: !anystr

---
# Matching via a regular expression
test_name:  Matching via a regular expression ex28

stages:
  - type: ref
    id: add_rand_user

  - name: Check value types in user details

    request:
      url: https://gorest.co.in/public-api/users/{user_id}
      method: GET
      headers:
        Content-Type: application/json
        Authorization: Bearer 0fVcl9o-ZPi5TbinICi7OU4fm_GJ_7q0O6ea

    response:
      status_code: 200
      json:
        result:
#          - first_name: !re_fullmatch "[A-Za-z0-9]"
          id: !re_search "[0-9]"
          first_name: !re_search "[A-Za-z0-9]"
          email: !re_search "[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+[a-zA-Z0-9-.]"
          status: active


---
# Adding a delay between tests

test_name: Adding a delay between tests ex29

stages:
  - type: ref
    id: add_rand_user

  - type: ref
    id: update_user_rand
#    delay_after: 5 # this raises error


  - name: Check user's details
    delay_before: 4

    request:
      url: https://gorest.co.in/public-api/users/{user_id_upd}
      method: GET
      headers:
        Content-Type: application/json
        Authorization: Bearer 0fVcl9o-ZPi5TbinICi7OU4fm_GJ_7q0O6ea

    response:
      status_code: 200
      verify_response_with:
        function: utils:log_response
      json:
        result:
          first_name: Max
          gender: male
          id: "{user_id_upd}"

---
# Retrying tests

test_name: Retrying tests ex30
stages:
  - name: Create a resource
    max_retries: 2  # retry a stage 2 times
    request:
      url: https://jsonplaceholder.typicode.com/posts
      method: POST
      json:
        title: foo
        body: bar
        userId: 2
      headers:
        content-type: application/json; charset=UTF-8

    response:
      status_code: 201

---
# Marking tests
# make sure pytest.ini does not contain " addopts = --strict" or add markers names

test_name: Marking tests ex31

marks:
  - gorest

stages:
  - type: ref
    id: add_rand_user

  - type: ref
    id: delete_user


---
# Skipping a test

test_name: Skipping a test ex32

marks:
  - skip

stages:
  - name: Check that HTTP status code equals 200 and other fields
    request:
      url: http://api.zippopotam.us/us/90211
      method: GET

    response:
      headers:
        content-type: application/json

---
# Skipping a test using skipif

test_name: Skipping a test using skipif ex33

marks:
  - skipif: "'api' in '{host_zipo}'"

stages:
  - name: Check that HTTP status code equals 200 and other fields
    request:
      url: "http://{host_zipo}/us/90211"
      method: GET

    response:
      headers:
        content-type: application/json

---
# Parametrising tests
# TODO: How we can use variables saved from previous stages/tests in "parametrize" block?

test_name: Parametrising tests. Using multiple status codes ex34
marks:
  - parametrize:
      key: userid
      vals:
#        - 2078
        - 2079
        - 2080
#        - "{user_id}" # this raises error E   tavern.util.exceptions.MissingFormatError: Tried to use mark 'parametrize' (with value '{'key': 'userid',

stages:
  - type: ref
    id: add_rand_user

  - name: Check that HTTP status code equals 200

    request:
      url: "https://gorest.co.in/public-api/users/{userid}"
      method: GET
      headers:
        Content-Type: application/json
        Authorization: Bearer 0fVcl9o-ZPi5TbinICi7OU4fm_GJ_7q0O6ea

    response:
      status_code:
        - 200
        - 404
      verify_response_with:
        function: utils:log_response
      json:
        result:
          id: "{userid}"
---
# Using fixtures

test_name: Using fixtures ex35

marks:
  - usefixtures:
      - zipcode # fixture defined in conftest.py

stages:
  - name: Read zip code from file and use in request
    request:
      url: "http://{host_zipo}/us/{zipcode}"
      method: GET

    response:
      headers:
        content-type: application/json
      status_code: 200

---
# Using hooks

test_name: Using hooks ex36

marks:
  - usefixtures:
      - zipcode # fixture defined in conftest.py

stages:
  - name: Read zip code from file and use in request
    request:
      url: "http://{host_zipo}/us/{zipcode}"
      method: GET

    response:
      headers:
        content-type: application/json
      status_code: 200

